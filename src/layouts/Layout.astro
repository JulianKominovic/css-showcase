---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script>
      let themeStored = localStorage.getItem("color-theme");
      if (!themeStored) {
        localStorage.setItem("color-theme", "dark");
        themeStored = "dark";
      }
      if (
        themeStored === "dark" ||
        (!("color-theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>
  </head>
  <body class="dark:bg-zinc-900 bg-zinc-200 dark:text-zinc-100">
    <style is:global>
      html {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        scroll-behavior: smooth;
      }
      body > main {
        overflow-x: hidden;
      }
      [data-animation="mount"] *,
      [data-animation="mount"] *::before,
      [data-animation="mount"] *::after {
        transition-property: opacity, transform, overflow;
        transition-timing-function: ease-in-out;
        transition-duration: 0.6s;
      }
      [data-ismounted="false"] *,
      [data-ismounted="false"] *::before,
      [data-ismounted="false"] *::after {
        opacity: 0;
        transform: translate3d(-60px, 0, 0);
        transition-property: opacity, transform, overflow;
        transition-timing-function: ease-in-out;
        transition-duration: 0.6s;
      }
    </style>
    <slot />

    <script>
      const items = document.querySelectorAll("[data-animation='mount']");
      let options = {
        root: null,
        rootMargin: "0px",
        threshold: [0.8, 0.5, 0.3],
      };

      let callback: IntersectionObserverCallback = (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.setAttribute("data-ismounted", "true");
            entry.target.setAttribute("data-animation", "mount");

            const timeoutId = setTimeout(() => {
              entry.target.removeAttribute("data-animation");
              clearTimeout(timeoutId);
            }, 620);
          }
        });
      };
      let observer = new IntersectionObserver(callback, options);
      items.forEach((el) => {
        el.setAttribute("data-ismounted", "false");
        observer.observe(el);
      });
    </script>
  </body>
</html>
